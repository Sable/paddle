/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.jimple.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;

/** Analysis for AspectJ cflow optimization. This class does the analysis for
 * a single cflow stack.
 * @author Ondrej Lhotak
 */
public class BDDCflowStack
{ 
    public static final boolean DEBUG = false;
    BDDCflow cflow;
    boolean bindsArgs;

    public BDDCflowStack( BDDCflow cflow, Collection/*Shadow*/ shadows, Collection/*Stmt*/ isValids, boolean bindsArgs ) {
        this.cflow = cflow;
        this.bindsArgs = bindsArgs;
        for( Iterator sIt = isValids.iterator(); sIt.hasNext(); ) {
            final Stmt s = (Stmt) sIt.next();
            Scene.v().getUnitNumberer().add(s);
            this.isValids |= new {s=>A_stmt};
        }
        for( Iterator sIt = shadows.iterator(); sIt.hasNext(); ) {
            final Shadow s = (Shadow) sIt.next();
            ShadowNumberer.v().add(s);
            Scene.v().getUnitNumberer().add(s.pushStmt());
            Scene.v().getUnitNumberer().add(s.popStmt());
            this.shadows |= new {s=>A_shadow};
            this.pushes |= new {s=>A_shadow, s.pushStmt()=>A_stmt};
        }
    }

    private void debug(String s) {
        if(DEBUG) G.v().out.println(s);
    }
    private <A_stmt> within(Shadow sh) {
        debug("Doing within "+sh);
        <A_stmt> ret = 0B;
        boolean inShadow = false;
        for( Iterator sIt = sh.method().getActiveBody().getUnits().iterator(); sIt.hasNext(); ) {
            final Stmt s = (Stmt) sIt.next();
            if( s == sh.popStmt() ) inShadow = false;
            if( inShadow ) {
                Scene.v().getUnitNumberer().add(s);
                ret |= new{s=>A_stmt}; 
            }
            if( s == sh.pushStmt() ) inShadow = true;
        }
        return ret;
    }

    private <A_method> targetsOf(<A_stmt> calls) {
        return (A_srcm=>, A_tgtm=>A_method) cflow.callGraph(){A_stmt} <> calls{A_stmt};
    }

    private <A_shadow, A_method> targetsOfShadow(<A_shadow, A_stmt> calls) {
        return (A_srcm=>, A_tgtm=>A_method) cflow.callGraph(){A_stmt} <> calls{A_stmt};
    }

    private <A_stmt> stmtsIn(<A_method> methods) {
        return cflow.stmtMethod(){A_method} <> methods{A_method};
    }

    private <A_shadow, A_stmt> stmtsInShadow(<A_shadow, A_method> methods) {
        return cflow.stmtMethod(){A_method} <> methods{A_method};
    }

    private <A_shadow, A_stmt> mayCflow() {
        <A_shadow, A_stmt> ret = 0B;
        for( Iterator shIt = shadows.iterator(); shIt.hasNext(); ) {
            final Shadow sh = (Shadow) shIt.next();
            ret |= new {sh=>A_shadow}{} >< within(sh){};
        }
        while(true) {
            <A_shadow, A_method> targets = targetsOfShadow(ret);
            if( ret == (ret |= stmtsInShadow(targets)) ) break;
        }
        return ret;
    }

    /*
    private <A_stmt> mustCflow() {
        <A_stmt> ret = 0B;
        for( Iterator shIt = shadows.iterator(); shIt.hasNext(); ) {
            final Shadow sh = (Shadow) shIt.next();
            if( sh.unconditional() ) {
                ret |= within(sh);
            }
        }
        while(true) {
            <A_method> methods = targetsOf(ret) - targetsOf(1B - ret);
            if( ret == (ret |= stmtsIn(methods)) ) break;
        }
        return ret;
    }
    */

    private <A_stmt> mustCflow() {
        <A_stmt> shadowStmts = 0B;
        for( Iterator shIt = shadows.iterator(); shIt.hasNext(); ) {
            final Shadow sh = (Shadow) shIt.next();
            if( sh.unconditional() ) {
                shadowStmts |= within(sh);
            }
        }
        <A_method> targets = 0B;
        for( Iterator mIt = Scene.v().getEntryPoints().iterator(); mIt.hasNext(); ) {
            final SootMethod m = (SootMethod) mIt.next();
            targets |= new{m=>A_method};
        }
        targets |= cflow.threadEntries();
        <A_stmt> ret = 0B;
        <A_stmt> oldRet;
        do {
            <A_stmt> targetStmts = stmtsIn(targets);
            targetStmts -= shadowStmts;
            targets = targetsOf(targetStmts);
            oldRet = ret;
            ret |= targetStmts;
        } while( oldRet != ret );
        return 1B - ret;
    }

    private <A_shadow:V1> shadows = 0B;
    private <A_shadow, A_stmt> pushes = 0B;
    private <A_stmt> mustCflow = 1B;
    private <A_shadow, A_stmt> mayCflow = 1B;
    private <A_stmt> isValids = 0B;
    private <A_stmt> neverValid = 0B;
    private <A_stmt> alwaysValid = 0B;

    public String queryStats() {
        return "LaTeX: "
            +shadows.size()+" & "
            +(shadows.size()-unnecessaryShadows.size())+" & "
            +isValids.size()+" & "+
            +(isValids&neverValid&alwaysValid).size()+" & "+
            +(neverValid-alwaysValid).size()+" & "+
            +(alwaysValid-neverValid).size()+" & "+
            +(isValids-neverValid-alwaysValid).size()+" \\";
        /*
        return
            "both: "+(neverValid&alwaysValid&isValids).size()+
            " always but not never: "+((alwaysValid-neverValid)&isValids).size()+
            " never but not always: "+((neverValid-alwaysValid)&isValids).size()+
            " not statically known: "+(isValids-neverValid-alwaysValid).size();
            */
    }
    /** Returns true if the call to isValid() in statement s always returns
     * false.
     */
    public boolean neverValid( Stmt s ) {
        if( mayCflow == 1B ) mayCflow = mayCflow();
        return new{s=>A_stmt}{A_stmt} >< (A_shadow=>) mayCflow{A_stmt} == 0B;
    }

    /** Returns true if the call to isValid() in statement s always returns
     * true.
     */
    public boolean alwaysValid( Stmt s ) {
        if( mustCflow == 1B ) mustCflow = mustCflow();
        return new{s=>A_stmt}{A_stmt} >< mustCflow{A_stmt} != 0B;
    }

    private <A_stmt> computeNeverValid() {
        if(neverValid != 0B) return neverValid;
        if( mayCflow == 1B ) mayCflow = mayCflow();
        <A_stmt> mayBeValid = (A_shadow=>) mayCflow{A_stmt} >< isValids{A_stmt};
        neverValid = isValids - mayBeValid;
        return neverValid;
    }
    /** Returns the subset of isValid statements in which the call to isValid()
     * always returns false.
     */
    public Iterator/*Stmt*/ neverValid() {
        debug("Computing neverValid");
        Iterator ret = computeNeverValid().iterator();
        debug("Done computing neverValid");
        return ret;
    }

    private <A_stmt> computeAlwaysValid() {
        if( bindsArgs ) {
            alwaysValid = 0B;
            return alwaysValid;
        }
        if( mustCflow == 1B ) mustCflow = mustCflow();
        alwaysValid = mustCflow{A_stmt} >< isValids{A_stmt};
        return alwaysValid;
    }

    /** Returns the subset of isValid statements in which the call to isValid()
     * always returns true.
     */
    public Iterator/*Stmt*/ alwaysValid() {
        debug("Computing alwaysValid");
        Iterator ret = computeAlwaysValid().iterator();
        debug("Done computing alwaysValid");
        return ret;
    }

    <A_shadow> unnecessaryShadows = 0B;

    /** Returns the subset of shadows whose effect cannot be observed by
     * any of the isValid statements. Specifically, returns the shadows
     * whose mayCflow does not contain any isValid statements that are
     * neither neverValid nor alwaysValid.
     */
    public Iterator/*Shadow*/ unnecessaryShadows() {
        debug("Computing unnecessaryShadows");
        <A_stmt> interestingIsValids = isValids;
        interestingIsValids -= computeAlwaysValid();
        interestingIsValids -= computeNeverValid();
        if( mayCflow == 1B ) mayCflow = mayCflow();
        <A_shadow> necessaryShadows = mayCflow{A_stmt} <> interestingIsValids{A_stmt};
        if( !bindsArgs ) {
            necessaryShadows -= mustCflow{A_stmt} <> pushes{A_stmt};
        }
        unnecessaryShadows = (shadows - necessaryShadows);
        Iterator ret = unnecessaryShadows.iterator();
        debug("Done computing unnecessaryShadows");
        return ret;
    }
}

