/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;
import jedd.*;

/** Keeps track of subtype relationships between PAG nodes.
 * @author Ondrej Lhotak
 */
public class BDDTypeManager extends AbsTypeManager
{ 
    BDDTypeManager( Rvar_method_type locals, Rvar_type globals, Robj_method_type localallocs, Robj_type globalallocs) {
        super( locals, globals, localallocs, globalallocs );
        this.fh = PaddleScene.v().BDDHierarchy();
    }
    <var, obj> result = 0B;
    <var, type> allVars = 0B;
    <obj, type> allObjs = 0B;
    public boolean update() {
        if( fh == null ) {
            result = 1B;
            return true;
        }

        <var, type> newVars;
        newVars = (method=>) locals.get();
        newVars |= globals.get();
        allVars |= newVars;

        <obj, type> newObjs;
        newObjs = (method=>) localallocs.get();
        newObjs |= globalallocs.get();
        allObjs |= newObjs;

        <subt, supt> subtypeRelation = fh.subtypeRelation();
        result |= (subtypeRelation{supt} <> newVars{type}){subt} <> allObjs{type};
        result |= (subtypeRelation{supt} <> allVars{type}){subt} <> newObjs{type};
        return true;
    }
    public BitVector get( Type type ) {
        throw new RuntimeException( "Not implemented" );
    }
    public <var, obj> get() {
        update();
        return result;
    }
    public boolean castNeverFails( Type from, Type to ) {
        if( fh == null ) return true;
        if( to == null ) return true;
        if( to == from ) return true;
        if( from == null ) return false;
        if( to.equals( from ) ) return true;
        //if( from instanceof NullType ) return true;
        //if( from instanceof AnySubType ) return true;
        //if( to instanceof NullType ) return false;
        if( to instanceof AnySubType ) throw new RuntimeException( "oops from="+from+" to="+to );
        return 0B != (fh.subtypeRelation() & new{from=>subt, to=>supt});
    }

    private BDDHierarchy fh;
}


