/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.jimple.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;
import soot.jimple.toolkits.callgraph.*;

/** Analysis for AspectJ cflow optimization.
 * @author Ondrej Lhotak
 */
public class BDDCflow
{ 
    public static final boolean DEBUG = false;
    public BDDCflow() {
        stmtMethod = 0B;
        if(DEBUG) G.v().out.println("Getting call graph");
        Date startCG = new Date();
        <A_kind> wantedKinds =
              new{Kind.STATIC=>A_kind} 
            | new{Kind.VIRTUAL=>A_kind}
            | new{Kind.INTERFACE=>A_kind}
            | new{Kind.SPECIAL=>A_kind}
            | new{Kind.CLINIT=>A_kind}
            | new{Kind.PRIVILEGED=>A_kind}
            | new{Kind.NEWINSTANCE=>A_kind};

        <A_srcm:MS, A_stmt:ST, A_kind:KD, A_tgtm:MT> callEdges = 0B;

        AbsCallGraph cg = Results.v().callGraph();
        if( cg == null ) {
            if(DEBUG) G.v().out.println("No Paddle call graph -- using Soot one.");
            for( Iterator eIt = Scene.v().getCallGraph().listener(); eIt.hasNext(); ) {
                final Edge e = (Edge) eIt.next();
                Scene.v().getUnitNumberer().add(e.srcStmt());
                callEdges |= new{e.src()=>A_srcm, e.srcStmt()=>A_stmt,
                    e.kind()=>A_kind, e.tgt()=>A_tgtm};
            }
        } else {
            if(DEBUG) G.v().out.println("Using Paddle call graph.");
            callEdges = cg.ciEdges().get();
        }
        <A_method> methods = (A_srcm=>A_method, A_tgtm=>, A_kind=>, A_stmt=>) callEdges;
        methods |= (A_srcm=>, A_tgtm=>A_method, A_kind=>, A_stmt=>) callEdges;
        for( Iterator mIt = methods.iterator(); mIt.hasNext(); ) {
            final SootMethod m = (SootMethod) mIt.next();
            if( m.hasActiveBody() ) {
                for( Iterator sIt = m.getActiveBody().getUnits().iterator(); sIt.hasNext(); ) {
                    final Stmt s = (Stmt) sIt.next();
                    Scene.v().getUnitNumberer().add(s);
                    stmtMethod |= new{s=>A_stmt, m=>A_method};
                }
            }
        }

        callGraph = callEdges{A_kind} <> wantedKinds{A_kind};
        threadEntries = (A_tgtm=>A_method, A_srcm=>, A_stmt=>)
            callEdges{A_kind} <> new {Kind.THREAD=>A_kind}{A_kind};
        Date doneCG = new Date();
        if(DEBUG) G.v().out.println( "Getting call graph took "+(doneCG.getTime()-startCG.getTime())+" ms");
        if(DEBUG) G.v().out.println("Done getting call graph");
    }
    private <A_stmt, A_method> stmtMethod;
    <A_stmt, A_method> stmtMethod() { return stmtMethod; }
    private <A_srcm, A_stmt, A_tgtm> callGraph;
    <A_srcm, A_stmt, A_tgtm> callGraph() { return callGraph; }
    private <A_method> threadEntries;
    <A_method> threadEntries() { return threadEntries; }
}
