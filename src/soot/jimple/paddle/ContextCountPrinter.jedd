/* Soot - a J*va Optimization Framework
 * Copyright (C) 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.queue.*;
import java.util.*;
import soot.*;
import soot.jimple.toolkits.callgraph.*;

/** Prints number of contexts for each method, and call edge,
 * and the number of equivalence classes of contexts for each variable.
 * @author Ondrej Lhotak
 */
public class ContextCountPrinter
{ 
    public static void printContextCounts() {
        G.v().out.println( "Begin method context counts" );
        <A_ctxt, A_method> contextMethods = 
            Results.v().reachableMethods().contextMethods().get();
        for( Iterator mIt = ((A_ctxt=>) contextMethods).iterator(); mIt.hasNext(); ) {
            final SootMethod m = (SootMethod) mIt.next();
            <A_ctxt> contexts = new{m=>A_method}{A_method}<>contextMethods{A_method};
            G.v().out.println( contexts.size()+": "+m);
        }
        G.v().out.println( "End method context counts" );

        G.v().out.println( "Begin edge context counts" );
        AbsCallGraph cg = Results.v().callGraph();
        <A_srcc, A_srcm, A_stmt, A_kind, A_tgtc, A_tgtm> csEdges = cg.csEdges().get();
        for( Iterator tIt = cg.ciEdges().iterator(); tIt.hasNext(); ) {
            final Rsrcm_stmt_kind_tgtm.Tuple t = (Rsrcm_stmt_kind_tgtm.Tuple) tIt.next();
            <A_srcc, A_tgtc> contexts = 
                new{t.srcm()=>A_srcm, t.stmt()=>A_stmt,
                    t.kind()=>A_kind, t.tgtm()=>A_tgtm}{A_srcm, A_stmt, A_kind, A_tgtm}<>
                                            csEdges{A_srcm, A_stmt, A_kind, A_tgtm};
            G.v().out.println(
                contexts.size()+
                ": "+(new Edge(t.srcm(), t.stmt(), t.tgtm(), t.kind())) );
        }
        G.v().out.println( "End edge context counts" );

        AbsP2Sets p2sets = Results.v().p2sets();
        if(p2sets != null) {
            G.v().out.println( "Begin variable context counts" );
            for( Iterator vnIt = PaddleNumberers.v().varNodeNumberer().iterator(); vnIt.hasNext(); ) {
                final VarNode vn = (VarNode) vnIt.next();
                <A_varc:MEASURE1, A_var:MEASURE2, A_objc:MEASURE4, A_obj:MEASURE3>
                    p2set = p2sets.getReader(vn).get();
                G.v().out.println(
                    ((A_obj=>, A_objc=>)p2set).size()+":"+
                    ((A_var=>, A_objc=>)p2set).width(MEASURE1.v())+":"+
                    vn);
            }
            G.v().out.println( "End variable context counts" );
        }
    }
    public static void printTotalContextCounts() {
        AbsReachableMethods rm = Results.v().reachableMethods();
        G.v().out.println( "Total number of methodcontexts reachable : "+rm.contextMethods().get().size() );
        AbsP2Sets p2sets = Results.v().p2sets();
        if(p2sets != null) {
            <A_varc:MEASURE1, A_var:MEASURE2, A_objc:MEASURE4, A_obj:MEASURE3> 
                p2relation = p2sets.getReader().get();
            G.v().out.println( "Total number of contexts in points-to relation: "+
                ((A_var=>, A_objc=>, A_obj=>) p2relation).size() );
            G.v().out.println( "Total equivalence classes of contexts in points-to relation: "+p2relation.width(MEASURE1.v()) );
            G.v().out.println( "Total distinct points-to sets: "+p2relation.width(MEASURE2.v()) );
            BDDNodeInfo ni = (BDDNodeInfo) PaddleScene.v().ni;
            <A_varc:MEASURE1, A_method:MEASURE15, A_var:MEASURE2, A_objc:MEASURE4, A_obj:MEASURE3> 
                p2relationWithMethod =             p2relation {A_var} ><
                    (A_method=>MS, A_var=>V1)
                    (ni.localMap() |
                        (  ni.globalSet(){} >< 
                        new{null=>A_method}{}))                 {A_var};
            <A_varc, A_method> methodContexts = (A_var=>, A_objc=>, A_obj=>) p2relationWithMethod;
            G.v().out.println( "Total number of methodcontexts in points-to relation: "+
                methodContexts.size() );
            G.v().out.println( "Total equivalence classes of methodcontexts in points-to relation: "+p2relationWithMethod.width(MEASURE15.v()) );
            G.v().out.println( "Total distinct MC points-to sets: "+p2relationWithMethod.width(MEASURE2.v()) );

            if(PaddleScene.v().options().method_context_counts()) {
                for( Iterator mIt = Results.v().reachableMethods().methodIterator(); mIt.hasNext(); ) {
                    final SootMethod m = (SootMethod) mIt.next();
                    <A_varc:MEASURE1, A_var:MEASURE2, A_objc:MEASURE4, A_obj:MEASURE3> 
                        p2formethod = p2relationWithMethod{A_method} 
                                        <> new{m=>A_method}{A_method};
                    System.out.println("MC: "+
                        (methodContexts{A_method} <> new{m=>A_method}{A_method}).size()+" "+
                        p2formethod.width(MEASURE1.v())+" "+
                        m);
                    if(m.getName().equals("implies")) {
                        System.out.println((methodContexts{A_method} <> new{m=>A_method}{A_method}).toString());
                    }
                }
            }
        }
    }
}


