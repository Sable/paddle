/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.queue.*;
import java.util.*;
import soot.options.PaddleOptions;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.queue.*;
import jedd.*;

/** Propagates points-to sets along pointer assignment graph using BDDs.
 * @author Ondrej Lhotak
 */

public final class PropBDDInc extends PropBDD {
    public PropBDDInc(  Rsrcc_src_dstc_dst simple, Rsrcc_src_fld_dstc_dst load, Rsrcc_src_dstc_dst_fld store,
            Robjc_obj_varc_var alloc, Qvarc_var_objc_obj propout, AbsPAG pag ) {
        super( simple, load, store, alloc, propout, pag );
    }

    private <A_varc, A_var, A_objc, A_obj> ptFromLoad = 0B;

    public final boolean fieldUpdate() {
        <A_varc, A_var, A_objc, A_obj> oldPt = pt;

        fieldPt = propStore( pt, pag.allStore().get(), pt );
        <A_varc, A_var, A_objc, A_obj> ptFromThisLoad = propLoad( fieldPt, pag.allLoad().get(), pt ) & typeFilter();
        pt |= ptFromThisLoad;
        ptFromLoad |= ptFromThisLoad;
        outputPt( ptFromThisLoad );

        return pt != oldPt;
    }
    public final boolean update() {

        <A_varc, A_var, A_objc, A_obj> oldPt = pt;

        <A_varc,A_var,A_objc,A_obj>
            ptFromAlloc = newAlloc.get() & typeFilter();
        <A_varc,A_var,A_objc,A_obj>
            ptFromSimple1 = propSimple( pt, newSimple.get() ) & typeFilter();
        <A_varc,A_var,A_objc,A_obj>
            ptFromAllocAndSimple1 = ptFromAlloc|ptFromSimple1;
        <A_varc,A_var,A_objc,A_obj>
            ptFromSimple2 = propSimple( ptFromAllocAndSimple1|ptFromLoad,
                pag.allSimple().get() ) & typeFilter();
        ptFromLoad = 0B;
        <A_varc,A_var,A_objc,A_obj>
            ptFromAllocAndSimple = ptFromAllocAndSimple1|ptFromSimple2;
        pt |= ptFromAllocAndSimple;
        outputPt( ptFromAllocAndSimple );

        if( PaddleScene.v().options().verbose() ) {
            G.v().out.println( "Major iteration: " );
        }

        return pt != oldPt;
    }

    /* End of public methods. */
    /* End of package methods. */

}

