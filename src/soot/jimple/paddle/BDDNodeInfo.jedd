/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;

/** Keeps track of the type and method of each node.
 * @author Ondrej Lhotak
 */
public class BDDNodeInfo extends AbsNodeInfo
{ 
    public BDDNodeInfo(
        Rvar_method_type locals,
        Rvar_type globals,
        Robj_method_type localallocs,
        Robj_type globalallocs
        ) 
    {
        super(locals, globals, localallocs, globalallocs);
    }

    public boolean update() {
        boolean ret = false;
        if( localMap != (localMap |= (A_type=>) locals.get()) ) ret = true;
        if( globalSet != (globalSet |= (A_type=>) globals.get()) ) ret = true;
        if( localallocMap != (localallocMap |= (A_type=>) localallocs.get()) )
            ret = true;
        if( globalallocSet != (globalallocSet |= (A_type=>) globalallocs.get()) )
            ret = true;
        return ret;
    }

    private <A_var, A_method> localMap = 0B;
    private <A_var> globalSet = 0B;
    private <A_obj, A_method> localallocMap = 0B;
    private <A_obj> globalallocSet = 0B;

    public <A_var, A_method> localMap() { return localMap; }
    public <A_var> globalSet() { return globalSet; }
    public <A_obj, A_method> localallocMap() { return localallocMap; }
    public <A_obj> globalallocSet() { return globalallocSet; }

}

