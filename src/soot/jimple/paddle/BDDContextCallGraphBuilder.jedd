/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;

/** Converts context-insensitive call edges into context-sensitive ones
 * for each reachable method context.
 * @author Ondrej Lhotak
 */
public class BDDContextCallGraphBuilder extends AbsContextCallGraphBuilder 
{ 
    BDDContextCallGraphBuilder( Rctxt_method methodsIn,
        Rsrcm_stmt_kind_tgtm edgesIn,
        Qsrcc_srcm_stmt_kind_tgtc_tgtm out
        ) {
        super( methodsIn, edgesIn, out );
    }
    private <A_ctxt, A_method> m2c = 0B;
    private <A_srcm, A_stmt, A_kind, A_tgtm> cicg = 0B;
    public boolean update() {
        <A_srcm, A_stmt, A_kind, A_tgtm> newEdges = edgesIn.get();
        <A_srcc, A_srcm, A_stmt, A_kind, A_tgtc, A_tgtm> newOut =
             new{null=>A_tgtc}{} ><
             (newEdges{A_srcm} >< (A_ctxt=>A_srcc) m2c{A_method}){};
        cicg |= newEdges;

        <A_ctxt, A_method> methods = methodsIn.get();
        newOut |= new{null=>A_tgtc}{} ><
            (cicg{A_srcm} >< (A_ctxt=>A_srcc) methods{A_method}){};
        out.add( newOut );
        m2c |= methods;
        return newOut != 0B;
    }
}

