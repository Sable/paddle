/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.jimple.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.queue.*;
import soot.util.*;
import java.util.*;

/** Generates escape information from points-to sets. */
public class BDDEscapeAnalysis {
    <A_objc, A_obj> escapesThread = 0B;
    <A_objc, A_obj> escapesMethod = 0B;

    private <A_var> staticVars = 0B;
    private <A_var> threadThis = 0B;

    private <A_method, A_var> methodRoots = 0B;

    private <A_varc, A_var, A_objc, A_obj> pt = 0B;
    private <A_basec, A_base, A_objc, A_obj> fieldPt = 0B;
    
    private void setupRoots() {
        pt = Results.v().p2sets().getReader().get();
        fieldPt = (A_fld=>)Results.v().p2sets().fieldPt().get();

        NodeFactory gnf = Results.v().nodeFactory();
        Rmethod rmethods = Results.v().reachableMethods().methods();
        <A_method> methods = rmethods.get();
        for( Iterator mIt = methods.iterator(); mIt.hasNext(); ) {
            final SootMethod m = (SootMethod) mIt.next();
            MethodNodeFactory mnf = new MethodNodeFactory(m, gnf);
            if( !m.isStatic() ) {
                methodRoots |= new {m=>A_method, mnf.caseThis()=>A_var};
            }
            for( int i = 0; i < m.getParameterCount(); i++ ) {
                if( !( m.getParameterType(i) instanceof RefLikeType ) ) continue;
                methodRoots |= new {m=>A_method, mnf.caseParm(i)=>A_var};
            }
            if( m.getReturnType() instanceof RefLikeType ) {
                methodRoots |= new {m=>A_method, mnf.caseRet()=>A_var};
            }
        }
        methodRoots |= methods{} >< new {gnf.caseThrow()=>A_var}{};

        for( Iterator vnIt = PaddleNumberers.v().varNodeNumberer().iterator(); vnIt.hasNext(); ) {

            final VarNode vn = (VarNode) vnIt.next();
            Object o = vn.getVariable();
            if( o instanceof SootField ) {
                SootField sf = (SootField) o;
                if( sf.isStatic() ) staticVars |= new{vn=>A_var};
            }
        }
        FastHierarchy fh = Scene.v().getOrMakeFastHierarchy();
        LinkedList queue = new LinkedList();
        queue.add(Scene.v().getSootClass("java.lang.Thread"));
        while( !queue.isEmpty() ) {
            SootClass cl = (SootClass) queue.removeFirst();
            queue.addAll( fh.getSubclassesOf(cl) );
            if( cl.declaresMethod(sigRun) ) {
                SootMethod run = cl.getMethod(sigRun);
                threadThis |= new {new MethodNodeFactory(run, gnf).caseThis()=>A_var};
            }
        }
    }

    private NumberedString sigRun = Scene.v().getSubSigNumberer().
        findOrAdd("void run()");

    private void propagate() {
        escapesThread |= (A_varc=>) pt{A_var} <> (staticVars|threadThis){A_var};
        while(true) {
            if( escapesThread !=
            (escapesThread |= escapesThread{A_objc,A_obj} <> fieldPt{A_basec,A_base}))
                break;
        }
        <A_ctxt, A_method, A_objc, A_obj> methodReachable = 0B;
        methodReachable |= (A_varc=>A_ctxt) pt{A_var} <> methodRoots{A_var};
        while(true) {
            if( methodReachable ==
            (methodReachable |= methodReachable{A_objc,A_obj} <> fieldPt{A_basec,A_base}))
                break;
        }

        <A_obj, A_method> localallocs = 
            ((BDDNodeInfo) PaddleScene.v().ni).localallocMap();
        escapesMethod |= escapesThread;
        <A_ctxt, A_method, A_objc, A_obj> methodMatches = 
            methodReachable{A_method,A_obj} >< localallocs{A_method,A_obj};
        <A_objc, A_method, A_obj> contextMatches;
        if(PaddleScene.v().options().context_heap()) {
            contextMatches =
                (A_ctxt=>)methodMatches{A_objc,A_method,A_obj} ><
                (A_objc=>)methodMatches{A_ctxt,A_method,A_obj};
        } else {
            contextMatches = (A_ctxt=>) methodMatches;
        }
        escapesMethod |= (A_method=>) contextMatches;
        escapesMethod |= ((BDDNodeInfo) PaddleScene.v().ni).globalallocSet(){}
                    >< new{null=>A_objc}{};
    }

    public void analyze() {
        setupRoots();
        propagate();
    }

    public Iterator escapesThread() {
        return ((A_objc=>) escapesThread).iterator();
    }
    public Iterator escapesMethod() {
        return ((A_objc=>) escapesMethod).iterator();
    }
}

