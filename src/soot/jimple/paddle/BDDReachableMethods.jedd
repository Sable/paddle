/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import soot.*;

/** Keeps track of which methods are reachable.
 * @author Ondrej Lhotak
 */
public class BDDReachableMethods extends AbsReachableMethods 
{ 
    private <ctxt, method> reachables;
    private AbsCallGraph cg;
    private Rctxt_method newMethods;
    BDDReachableMethods( Rsrcc_srcm_stmt_kind_tgtc_tgtm edgesIn, Rctxt_method methodsIn, Qctxt_method out, AbsCallGraph cg ) {
        super( edgesIn, methodsIn, out );
        this.cg = cg;
        newMethods = out.reader("bddrm");
    }
    public boolean update() {
        boolean change = false;

        if( methodsIn != null ) {
            <ctxt, method> newMethodsIn = methodsIn.get();
            newMethodsIn -= reachables;
            if( newMethodsIn != 0B ) change = true;
            reachables |= newMethodsIn;
            out.add( newMethodsIn );
        }

        <srcc, srcm, stmt, kind, tgtc, tgtm> newEdges =
            edgesIn.get() {srcc, srcm} >< reachables {ctxt, method};

        newEdges |= cg.edgesOutOf( newMethods ).get();

        while( newEdges != 0B ) {
            <ctxt, method> newTargets =
                (srcc=>, srcm=>, stmt=>, kind=>, tgtc=>ctxt, tgtm=>method) newEdges;
            newTargets -= reachables;
            out.add( newTargets );
            if( newTargets != 0B ) change = true;
            reachables |= newTargets;
            newEdges = cg.edgesOutOf( newMethods ).get();
        }
        return change;
    }
    boolean add( Context c, SootMethod m ) {
        <ctxt, method> newM = new{ c=>ctxt, m=>method };
        <ctxt, method> newReachables = reachables | newM;
        if( newReachables != reachables ) {
            reachables = newReachables;
            out.add( newM );
            return true;
        }
        return false;
    }
    int size() {
        return (int) reachables.size();
    }
    boolean contains( Context c, SootMethod m ) {
        <ctxt, method> newM = new{ c=>ctxt, m=>method };
        return (reachables & newM) != 0B;
    }
    Rctxt_method methods() {
        return new Rctxt_methodBDD(reachables, "methods");
    }
}

