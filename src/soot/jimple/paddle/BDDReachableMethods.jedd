/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import soot.*;
import java.util.*;

/** Keeps track of which methods are reachable.
 * @author Ondrej Lhotak
 */
public class BDDReachableMethods extends AbsReachableMethods 
{ 
    private <ctxt, method> reachableCM;
    private <method> reachableM;
    private AbsCallGraph cg;
    private Rctxt_method newMethods;
    BDDReachableMethods( Rsrcc_srcm_stmt_kind_tgtc_tgtm edgesIn, Rctxt_method methodsIn, Qmethod mout, Qctxt_method cmout, AbsCallGraph cg ) {
        super( edgesIn, methodsIn, mout, cmout == null ? new Qctxt_methodBDD("cmout") : cmout );
        this.cg = cg;
        newMethods = this.cmout.reader("bddrm");
    }
    public boolean update() {
        boolean change = false;

        if( methodsIn != null ) {
            <ctxt, method> newMethodsIn = methodsIn.get();
            if(add(newMethodsIn)) change = true;
        }

        if( edgesIn != null ) {
            <srcc, srcm, stmt, kind, tgtc, tgtm> newEdges =
                edgesIn.get() {srcc, srcm} >< reachableCM {ctxt, method};

            newEdges |= cg.edgesOutOf( newMethods ).get();

            while( newEdges != 0B ) {
                <ctxt, method> newTargets =
                    (srcc=>, srcm=>, stmt=>, kind=>, tgtc=>ctxt, tgtm=>method) newEdges;
                if(add( newTargets )) change = true;
                newEdges = cg.edgesOutOf( newMethods ).get();
            }
        }
        return change;
    }
    boolean add( Context c, SootMethod m ) {
        return add( new{ c=>ctxt, m=>method } );
    }
    private boolean add(<ctxt, method> methodContexts) {
        boolean ret = false;
        <ctxt, method> newCM = methodContexts - reachableCM;
        reachableCM |= newCM;
        if(cmout != null) cmout.add(newCM);
        <method> newM = (ctxt=>)methodContexts - reachableM;
        reachableM |= newM;
        if(mout != null) mout.add(newM);
        return (newCM != 0B) || (newM != 0B);
    }
    int sizeM() {
        return (int) reachableM.size();
    }
    int sizeCM() {
        return (int) reachableCM.size();
    }
    boolean contains( SootMethod m ) {
        <method> newM = new{ m=>method };
        return (reachableM & newM) != 0B;
    }
    boolean contains( Context c, SootMethod m ) {
        <ctxt, method> newM = new{ c=>ctxt, m=>method };
        return (reachableCM & newM) != 0B;
    }
    public Rmethod methods() {
        return new RmethodBDD(reachableM, "methods", null);
    }
    public Rctxt_method contextMethods() {
        return new Rctxt_methodBDD(reachableCM, "methods", null);
    }
    public Iterator methodIterator() {
        return reachableM.iterator();
    }
    public long countContexts(SootMethod m) {
        <ctxt> contexts = reachableCM{method} <> new{m=>method}{method};
        return contexts.size();
    }
}

