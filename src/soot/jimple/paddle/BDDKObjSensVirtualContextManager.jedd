/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import jedd.*;
import java.util.*;
import soot.*;

/** Assigns a target context to virtual call edges depending on the source
 * context.
 * @author Ondrej Lhotak
 */
public class BDDKObjSensVirtualContextManager extends BDDVirtualContextManager
{ 
    BDDKObjSensVirtualContextManager( Rvarc_var_objc_obj_srcm_stmt_kind_tgtm in, Qsrcc_srcm_stmt_kind_tgtc_tgtm out, Qobjc_obj_varc_var thisOut, NodeFactory gnf, int k ) {
        super( in, out, thisOut, gnf );
        this.k = k;
    }
    private Jedd.Shifter shifter;
    private int k;
    private int shiftWidth() {
        return ((ContextStringNumberer) Scene.v().getContextNumberer())
            .shiftWidth;
    }
    public boolean update() {
        if( shifter == null ) {
            int[] from = new int[(k-1)*shiftWidth()];
            int[] to = new int[(k-1)*shiftWidth()];
            for( int i = 0; i < from.length; i++ ) {
                from[i] = i + C1.v().firstBit();
                to[i] = i + C2.v().firstBit() + shiftWidth();
            }
            shifter = Jedd.v().makeShifter( from, to );
        }
        <varc, var, objc, obj, srcm, stmt, kind, tgtm> newIn = in.get();
        <varc:C1, objc:C3, obj, srcm, stmt, kind, tgtc:C2, tgtm> newEdges = 
            (var=>, obj=>obj, obj=>tgtc) newIn;
        newEdges = (<varc, objc, obj, srcm, stmt, kind, tgtc, tgtm>)
            newEdges.applyShifter(shifter);
        out.add((varc=>srcc, objc=>, obj=>) newEdges);

        newMethods((varc=>, objc=>, obj=>, srcm=>, stmt=>, kind=>, tgtc=>)
            newEdges);
        thisOut.add(
            (varc=>, srcm=>, stmt=>, kind=>, tgtc=>varc) newEdges{tgtm} <>
            thisVar(){method} );

        return newIn != 0B;
    }
}
