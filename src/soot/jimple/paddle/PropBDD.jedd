/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.queue.*;
import java.util.*;
import soot.options.PaddleOptions;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.queue.*;
import jedd.*;

/** Propagates points-to sets along pointer assignment graph using BDDs.
 * @author Ondrej Lhotak
 */

public class PropBDD extends AbsPropagator {
    public PropBDD(  Rsrcc_src_dstc_dst simple, Rsrcc_src_fld_dstc_dst load, Rsrcc_src_dstc_dst_fld store,
            Robjc_obj_varc_var alloc, Qvarc_var_objc_obj propout, AbsPAG pag ) {
        super( simple, load, store, alloc, propout, pag );
    }

    /*package*/ <A_varc, A_var, A_objc, A_obj> pt = 0B;
    /*package*/ <A_basec, A_base, A_fld, A_objc, A_obj> fieldPt = 0B;

    protected <A_varc, A_var, A_objc, A_obj> typeFilter() {
        final <A_varc, A_objc> allContexts = 1B;
        return PaddleScene.v().tm.get(){} >< allContexts{};
    }

    protected <A_varc, A_var, A_objc, A_obj> outputtedPt = 0B;
    protected void outputPt( <A_varc, A_var, A_objc, A_obj> pt ) {
        <A_varc, A_var, A_objc, A_obj> toOutput = pt - outputtedPt;
        if( toOutput == 0B ) return;
        ptout.add( toOutput );
        outputtedPt |= toOutput;
    //    PaddleScene.v().updateCallGraph();
    }

    /** Propagate points-to relation pt over assignments simple. */
    protected <A_varc:C1, A_var, A_objc:CH1, A_obj> propSimple(
        <A_varc:C1, A_var, A_objc:CH1, A_obj> pt,
        <A_srcc:C1, A_src, A_dstc:C2, A_dst> simple ) {

        <A_varc, A_var, A_objc, A_obj> ret = 0B;
        while( true ) {
            pt = typeFilter() &
                ((A_dstc=>A_varc, A_dst=>A_var) 
                                       simple {A_srcc, A_src} 
                                        <> pt {A_varc, A_var} );
            pt -= ret;
            if(pt == 0B) break;
            ret |= pt;
        }
        return ret;
    }

    /** Propagate points-to relation pt over stores stores pointing to storePt. */
    protected <A_basec:CH1, A_base:H1, A_fld, A_objc:CH2, A_obj:H2> propStore(
        <A_varc, A_var, A_objc, A_obj> pt,
        <A_srcc, A_src, A_fld, A_dstc, A_dst> store,
        <A_varc, A_var, A_objc, A_obj> storePt ) {

        <A_objc, A_obj, A_varc, A_var, A_fld> objectsBeingStored =
            (A_dstc=>A_varc, A_dst=>A_var) store {A_srcc, A_src} 
                                   <> pt {A_varc, A_var};
                                        
        return               objectsBeingStored {A_varc, A_var} 
            <> (A_objc=>A_basec, A_obj=>A_base) storePt {A_varc, A_var};
    }

    /** Propagate points-to relation fpt over loads pointing to loadPt. */
    protected <A_varc, A_var, A_objc, A_obj> propLoad(
        <A_basec, A_base, A_fld, A_objc, A_obj> fpt,
        <A_srcc, A_src, A_fld, A_dstc, A_dst> load,
        <A_varc, A_var, A_objc, A_obj> loadPt ) {

        <A_basec, A_base, A_fld, A_dstc, A_dst> loadsFromHeap;
        loadsFromHeap =                   load{A_srcc, A_src} 
            <> (A_objc=>A_basec, A_obj=>A_base) loadPt{A_varc, A_var};

        return (A_dstc=>A_varc, A_dst=>A_var) loadsFromHeap {A_basec,A_base,A_fld} 
                                             <> fpt {A_basec,A_base,A_fld};
    }

    public boolean fieldUpdate() {
        <A_varc, A_var, A_objc, A_obj> oldPt = pt;

        fieldPt |= propStore( pt, pag.allStore().get(), pt );
        pt |= propLoad( fieldPt, pag.allLoad().get(), pt ) & typeFilter();

        outputPt( pt );
        return pt != oldPt;
    }

    public boolean update() {
        <A_varc, A_var, A_objc, A_obj> oldPt = pt;

        pt |= newAlloc.get() & typeFilter();
        pt |= propSimple( pt, pag.allSimple().get() ) & typeFilter();
        outputPt( pt );


        if( PaddleScene.v().options().verbose() ) {
                G.v().out.println( "Major iteration: " );
        }

        return pt != oldPt;
    }

    private BDDP2Sets p2sets = new BDDP2Sets(this);
    public AbsP2Sets p2sets() { return p2sets; }

    /* End of public methods. */
    /* End of package methods. */

}



