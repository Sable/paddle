/* Soot - a J*va Optimization Framework
 * Copyright (C) 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.jimple.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import soot.options.*;
import java.util.*;
import java.util.zip.*;
import java.io.*;
import jedd.*;
import soot.jimple.toolkits.callgraph.ContextSensitiveCallGraph;
import soot.jimple.toolkits.callgraph.ContextSensitiveEdge;

/** Wrapper to implement the generic Soot ContextSensitiveCallGraph interface.
 * @author Ondrej Lhotak
 */
public class PaddleContextSensitiveCallGraph implements ContextSensitiveCallGraph
{ 
    public PaddleContextSensitiveCallGraph(AbsCallGraph acg) {
        this.acg = acg;
    }

    AbsCallGraph acg;

    class EdgesWrapper {
        <A_srcc, A_srcm, A_stmt, A_kind, A_tgtc, A_tgtm> edges = 1B;
    }

    private EdgesWrapper edgesWrapper;
    private <A_srcc, A_srcm, A_stmt, A_kind, A_tgtc, A_tgtm> edges() {
        if(edgesWrapper == null) {
            edgesWrapper = new EdgesWrapper();
            edgesWrapper.edges = acg.csEdges().get();
        }
        return edgesWrapper.edges;
    }

    public Iterator edgeSources() {
        return new Iterator() {
            Iterator it = new Rctxt_methodBDD(
                (A_srcc=>A_ctxt, A_srcm=>A_method, A_stmt=>, A_kind=>, A_tgtc=>, A_tgtm=>)edges()).iterator();
            public boolean hasNext() {
                return it.hasNext();
            }
            public Object next() {
                Rctxt_method.Tuple t = (Rctxt_method.Tuple) it.next();
                return MethodContext.v(t.method(), t.ctxt());
            }
            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }

    public Iterator allEdges() {
        return edgeIterator(edges());
    }

    public Iterator edgesOutOf(Context srcCtxt, SootMethod src, Unit srcUnit) {
        return edgeIterator(                     edges(){A_srcc, A_srcm, A_stmt} ><
            new{srcCtxt=>A_srcc, src=>A_srcm, srcUnit=>A_stmt}{A_srcc, A_srcm, A_stmt});
    }

    public Iterator edgesOutOf(Context srcCtxt, SootMethod src) {
        return edgeIterator(                     edges(){A_srcc, A_srcm} ><
                           new{srcCtxt=>A_srcc, src=>A_srcm}{A_srcc, A_srcm});
    }

    public Iterator edgesInto(Context tgtCtxt, SootMethod tgt) {
        return edgeIterator(                     edges(){A_tgtc, A_tgtm} ><
                           new{tgtCtxt=>A_tgtc, tgt=>A_tgtm}{A_tgtc, A_tgtm});
    }

    private static Iterator edgeIterator(final <A_srcc, A_srcm, A_stmt, A_kind, A_tgtc, A_tgtm> edges) {
        return new Iterator() {
            Iterator it = new Rsrcc_srcm_stmt_kind_tgtc_tgtmBDD(
                (A_srcc=>A_srcc, A_srcm=>A_srcm, A_stmt=>A_stmt, A_kind=>A_kind, A_tgtc=>A_tgtc, A_tgtm=>A_tgtm)edges).iterator();
            public boolean hasNext() {
                return it.hasNext();
            }
            public Object next() {
                final Rsrcc_srcm_stmt_kind_tgtc_tgtm.Tuple t =
                    (Rsrcc_srcm_stmt_kind_tgtc_tgtm.Tuple) it.next();
                return new ContextSensitiveEdge() {
                    public Context srcCtxt() { return t.srcc(); }
                    public SootMethod src() { return t.srcm(); }
                    public Unit srcUnit() { return t.stmt(); }
                    public Stmt srcStmt() { return (Stmt) t.stmt(); }
                    public Kind kind() { return t.kind(); }
                    public Context tgtCtxt() { return t.tgtc(); }
                    public SootMethod tgt() { return t.tgtm(); }
                };
            }
            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }
}

