/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle.queue;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public final class QmethodSet extends Qmethod {
    public QmethodSet( String name ) { super(name); }
    private LinkedList readers = new LinkedList();
    public void add( SootMethod _method ) {
        invalidate();
        Rmethod.Tuple in = new Rmethod.Tuple( _method );
        for( Iterator it = readers.iterator(); it.hasNext(); ) {
            RmethodSet reader = (RmethodSet) it.next();
            reader.add( in );
        }
    }
    public void add( <method:MS> in ) {
        throw new RuntimeException();
    }
    public Rmethod reader( String rname ) {
        Rmethod ret = new RmethodSet(name+":"+rname, this);
        readers.add( ret );
        return ret;
    }
    public Rmethod revreader(String rname) {
        Rmethod ret = new RmethodRev(name+":"+rname, this);
        readers.add( ret );
        return ret;
    }
}
