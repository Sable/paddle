/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle.queue;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public class Robj_typeSet extends Robj_type {
    public Robj_typeSet(String name, PaddleQueue q) { super(name, q); }
    protected LinkedList bdd = new LinkedList();
    void add( Robj_type.Tuple tuple ) {
        bdd.addLast(tuple);
    }
    public Iterator iterator() {;
        return new Iterator() {
            private Iterator it;
            public boolean hasNext() {
                if( it != null && it.hasNext() ) return true;
                if( !bdd.isEmpty() ) return true;
                return false;
            }
            public Object next() {
                if( it == null || !it.hasNext() ) {
                    it = bdd.iterator();
                    bdd = new LinkedList();
                }
                return it.next();
            }
            public void remove() { throw new UnsupportedOperationException(); }
        };
    }
    public <obj:H1, type:T1> get() {
        throw new RuntimeException();
    }
    public boolean hasNext() { return !bdd.isEmpty(); }
}
