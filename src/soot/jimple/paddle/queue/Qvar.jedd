/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle.queue;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public abstract class Qvar implements soot.jimple.paddle.PaddleQueue {
    public Qvar( String name ) { this.name = name; }
    protected String name;
    public final String toString() { return name; }
    public abstract void add( VarNode _var );
    public abstract void add( <A_var:V1> in );
    public abstract Rvar reader( String rname );
    public Rvar revreader( String rname ) { return reader( rname ); }
    public void add( Rvar.Tuple in ) {
        add(
            in.var() 
        );
    }
    public void invalidate() {
        for(int i = 0; i < depMans.length; i++)
            depMans[i].invalidate(this);
    }
    private DependencyManager[] depMans = new DependencyManager[0];
    public void addDepMan(DependencyManager depMan) {
        for(int i = 0; i < depMans.length; i++)
            if(depMan == depMans[i]) return;
        DependencyManager[] oldDepMans = depMans;
        depMans = new DependencyManager[depMans.length+1];
        for(int i = 0; i < oldDepMans.length; i++)
            depMans[i] = oldDepMans[i];
        depMans[oldDepMans.length] = depMan;
    }
}
