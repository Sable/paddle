/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle.queue;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public class Qctxt_methodDebug extends Qctxt_method {
    public Qctxt_methodDebug( String name ) { super(name); }
    private Qctxt_methodBDD bdd = new Qctxt_methodBDD(name+"bdd");
    private Qctxt_methodSet trad = new Qctxt_methodSet(name+"set");
    public void add( Context _ctxt, SootMethod _method ) {
        invalidate();
        bdd.add( _ctxt, _method );
        trad.add( _ctxt, _method );
    }
    public void add( <A_ctxt:C1, A_method:MS> in ) {
        Iterator it = in.iterator( new Attribute[] { A_ctxt.v(), A_method.v() } );
        while( it.hasNext() ) {
            Object[] tuple = (Object[]) it.next();
            for( int i = 0; i < 2; i++ ) {
                add( (Context) tuple[0], (SootMethod) tuple[1] );
            }
        }
    }
    public Rctxt_method reader( String rname ) {
        return new Rctxt_methodDebug( (Rctxt_methodBDD) bdd.reader(rname), (Rctxt_methodSet) trad.reader(rname), name+":"+rname, this );
    }
}
