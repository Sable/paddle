/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle.queue;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public final class Rsrcc_src_fld_dstc_dstMerge extends Rsrcc_src_fld_dstc_dst {
    void add( <srcc:C1, src:V1, fld:FD, dstc:C2, dst:V2> tuple ) { throw new RuntimeException(); }
    private Rsrcc_src_fld_dstc_dst in1;
    private Rsrcc_src_fld_dstc_dst in2;
    public Rsrcc_src_fld_dstc_dstMerge( Rsrcc_src_fld_dstc_dst in1, Rsrcc_src_fld_dstc_dst in2 ) {
        super(in1.name+"+"+in2.name, null);
        this.in1 = in1;
        this.in2 = in2;
    }
    public Iterator iterator() {;
        final Iterator it1 = in1.iterator();
        final Iterator it2 = in2.iterator();
        return new Iterator() {
            public boolean hasNext() { return it1.hasNext() || it2.hasNext(); }
            public Object next() {
                if( it1.hasNext() ) return it1.next();
                return it2.next();
            }
            public void remove() { throw new UnsupportedOperationException(); }
        };
    }
    public <srcc:C1, src:V1, fld:FD, dstc:C2, dst:V2> get() {
        return in1.get() | in2.get();
    }
    public boolean hasNext() { return in1.hasNext() || in2.hasNext(); }
}
