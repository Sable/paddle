/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle.queue;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public abstract class Rvar_srcm_stmt_tgtm implements PaddleQueueReader {
    public Rvar_srcm_stmt_tgtm( String name, PaddleQueue q ) {
        this.name = name;
        this.q = q;
        Readers.v().add(this);
    }
    protected String name;
    protected PaddleQueue q;
    public PaddleQueue queue() { return q; }
    public final String toString() { return name; }
    public abstract Iterator iterator();
    public abstract <A_var:V1, A_srcm:MS, A_stmt:ST, A_tgtm:MT> get();
    public abstract boolean hasNext();
    public static class Tuple {
        private VarNode _var;
        public VarNode var() { return _var; }
        private SootMethod _srcm;
        public SootMethod srcm() { return _srcm; }
        private Unit _stmt;
        public Unit stmt() { return _stmt; }
        private SootMethod _tgtm;
        public SootMethod tgtm() { return _tgtm; }
        public Tuple( VarNode _var, SootMethod _srcm, Unit _stmt, SootMethod _tgtm ) {
            this._var = _var;
            this._srcm = _srcm;
            this._stmt = _stmt;
            this._tgtm = _tgtm;
        }
        public int hashCode() { return 0; }
        public boolean equals(Object other) {
            if(!(other instanceof Tuple)) return false;
            Tuple o = (Tuple) other;
            if(o._var != _var) return false;
            if(o._srcm != _srcm) return false;
            if(o._stmt != _stmt) return false;
            if(o._tgtm != _tgtm) return false;
            return true;
        }
        public String toString() {
            StringBuffer ret = new StringBuffer();
            ret.append( var() ); ret.append( ", " );
            ret.append( srcm() ); ret.append( ", " );
            ret.append( stmt() ); ret.append( ", " );
            ret.append( tgtm() ); ret.append( ", " );
            return ret.toString();
        }
    }
}
