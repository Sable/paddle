/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle.queue;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public abstract class Rbasec_base_fld_objc_obj implements PaddleQueueReader {
    public Rbasec_base_fld_objc_obj( String name, PaddleQueue q ) {
        this.name = name;
        this.q = q;
        Readers.v().add(this);
    }
    protected String name;
    protected PaddleQueue q;
    public PaddleQueue queue() { return q; }
    public final String toString() { return name; }
    public abstract Iterator iterator();
    public abstract <A_basec:CH1, A_base:H1, A_fld:FD, A_objc:CH2, A_obj:H2> get();
    public abstract boolean hasNext();
    public static class Tuple {
        private Context _basec;
        public Context basec() { return _basec; }
        private AllocNode _base;
        public AllocNode base() { return _base; }
        private PaddleField _fld;
        public PaddleField fld() { return _fld; }
        private Context _objc;
        public Context objc() { return _objc; }
        private AllocNode _obj;
        public AllocNode obj() { return _obj; }
        public Tuple( Context _basec, AllocNode _base, PaddleField _fld, Context _objc, AllocNode _obj ) {
            this._basec = _basec;
            this._base = _base;
            this._fld = _fld;
            this._objc = _objc;
            this._obj = _obj;
        }
        public int hashCode() { return 0; }
        public boolean equals(Object other) {
            if(!(other instanceof Tuple)) return false;
            Tuple o = (Tuple) other;
            if(o._basec != _basec) return false;
            if(o._base != _base) return false;
            if(o._fld != _fld) return false;
            if(o._objc != _objc) return false;
            if(o._obj != _obj) return false;
            return true;
        }
        public String toString() {
            StringBuffer ret = new StringBuffer();
            ret.append( basec() ); ret.append( ", " );
            ret.append( base() ); ret.append( ", " );
            ret.append( fld() ); ret.append( ", " );
            ret.append( objc() ); ret.append( ", " );
            ret.append( obj() ); ret.append( ", " );
            return ret.toString();
        }
    }
}
