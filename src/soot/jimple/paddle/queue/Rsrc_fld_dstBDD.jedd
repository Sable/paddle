/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004, 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle.queue;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.*;
import soot.jimple.toolkits.callgraph.*;
import soot.*;
import soot.util.queue.*;
import jedd.*;
import java.util.*;

public final class Rsrc_fld_dstBDD extends Rsrc_fld_dst {
    private <src:V1, fld:FD, dst:V2> bdd;
    void add( <src:V1, fld:FD, dst:V2> tuple ) { bdd |= tuple; }
    public Rsrc_fld_dstBDD( <src:V1, fld:FD, dst:V2> bdd, String name, PaddleQueue q ) { this(name, q); add(bdd); }
    public Rsrc_fld_dstBDD( <src:V1, fld:FD, dst:V2> bdd ) { this("", null); add(bdd); }
    Rsrc_fld_dstBDD(String name, PaddleQueue q) { super(name, q); bdd = 0B; }
    public Iterator iterator() {;
        return new Iterator() {
            private Iterator it;
            public boolean hasNext() {
                if( it != null && it.hasNext() ) return true;
                if( bdd != 0B ) return true;
                return false;
            }
            public Object next() {
                if( it == null || !it.hasNext() ) {
                    it = bdd.iterator( new Attribute[] { src.v(), fld.v(), dst.v() } );
                    bdd = 0B;
                }
                Object[] components = (Object[]) it.next();
                return new Tuple( (VarNode) components[0], (PaddleField) components[1], (VarNode) components[2] );
            }
            public void remove() { throw new UnsupportedOperationException(); }
        };
    }
    public <src:V1, fld:FD, dst:V2> get() {
        <src:V1, fld:FD, dst:V2> ret = bdd;
        bdd = 0B;
        return ret;
    }
    public boolean hasNext() { return bdd != 0B; }
}
