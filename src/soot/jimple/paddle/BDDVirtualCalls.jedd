/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003, 2004 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;

/** Resolves virtual calls based on the actual type of the receiver.
 * @author Ondrej Lhotak
 */
public class BDDVirtualCalls extends AbsVirtualCalls
{ 
    BDDVirtualCalls( Rvarc_var_objc_obj pt,
            Rvar_srcm_stmt_dtp_signature_kind receivers,
            Rvar_srcm_stmt_tgtm specials,
            Qvarc_var_objc_obj_srcm_stmt_kind_tgtm out,
            Qsrcc_srcm_stmt_kind_tgtc_tgtm statics,
            AbsP2Sets p2sets
        ) {
        super( pt, receivers, specials, out, statics, p2sets );
        for( Iterator clIt = Scene.v().getClasses().iterator(); clIt.hasNext(); ) {
            final SootClass cl = (SootClass) clIt.next();
            for( Iterator mIt = cl.getMethods().iterator(); mIt.hasNext(); ) {
                final SootMethod m = (SootMethod) mIt.next();
                if( m.isAbstract() ) continue;
                declaresMethod |= new{
                        m.getDeclaringClass().getType()=>A_type,
                        m.getNumberedSubSignature()=>A_signature,
                        m=>A_method };
            }
        }
        for( Iterator clsIt = Scene.v().dynamicClasses().iterator(); clsIt.hasNext(); ) {
            final SootClass cls = (SootClass) clsIt.next();
            for( Iterator clinitIt = EntryPoints.v().clinitsOf(cls).iterator(); clinitIt.hasNext(); ) {
                final SootMethod clinit = (SootMethod) clinitIt.next();
                dynamicClinits |= new{clinit=>A_tgtm};
            }
        }
    }

    private int lastVarNode = 1;
    private Iterator allocNodeIt = PaddleNumberers.v().allocNodeNumberer().iterator();
    private <A_var:V1, A_type> varNodes;
    private <A_obj, A_type> allocNodes;
    private <A_kind> virtual = new{Kind.VIRTUAL=>A_kind} | new{Kind.INTERFACE=>A_kind} | new{Kind.PRIVILEGED=>A_kind} | new{Kind.INVOKE_FINALIZE=>A_kind};
    private <A_type> threads = 0B;
    private void updateNodes() {
        <A_obj, A_tgtm> newStringConstants = 0B;
        <A_obj> newNonStringConstants = 0B;

        // update varnodes
        for( ; lastVarNode <= PaddleNumberers.v().varNodeNumberer().size();
            lastVarNode++ ) {
            VarNode vn = (VarNode) PaddleNumberers.v().varNodeNumberer().get(lastVarNode);
            varNodes |= new{ vn=>A_var, vn.getType()=>A_type };
        }

        for( Iterator anIt = allocNodeIt; anIt.hasNext(); ) {

            final AllocNode an = (AllocNode) anIt.next();
            if( an == null ) continue;
            allocNodes |= new{ an=>A_obj, an.getType()=>A_type };

            if( an instanceof StringConstantNode ) {
                StringConstantNode scn = (StringConstantNode) an;
                String constant = scn.getString();
                if( constant.charAt(0) == '[' ) {
                    if( constant.length() > 1 && constant.charAt(1) == 'L' 
                        && constant.charAt(constant.length()-1) == ';' ) {
                            constant = constant.substring(2,constant.length()-1);
                    } else constant = null;
                }
                if( constant != null && Scene.v().containsClass(constant)) {
                    SootClass cls = Scene.v().getSootClass(constant);
                    for( Iterator methodIt = EntryPoints.v().clinitsOf(cls).iterator(); methodIt.hasNext(); ) {
                        final SootMethod method = (SootMethod) methodIt.next();
                        newStringConstants |= new{ an=>A_obj, method=>A_tgtm };
                    }
                }
            } else {
                newNonStringConstants |= new{an=>A_obj};
            }
        }
        threads = (A_subt=>A_type)
            hier.subtypeRelation(){A_supt} <> new{clRunnable=>A_type}{A_type};
        stringConstants |= newStringConstants;
        nonStringConstants |= newNonStringConstants;
        newClinitTargets |= 
            newStringConstants | (newNonStringConstants{} >< dynamicClinits{});
    }
    protected final RefType clRunnable = RefType.v("java.lang.Runnable");
        
    private <A_obj, A_tgtm> stringConstants = 0B;
    private <A_obj:H1> nonStringConstants = 0B;
    private <A_obj, A_tgtm> newClinitTargets = 0B;
    private <A_obj, A_tgtm> clinitTargets = 0B;
    private <A_tgtm> dynamicClinits = 0B;
    private final NumberedString sigClinit = Scene.v().getSubSigNumberer().
        findOrAdd( "void <clinit>()" );
    
    private <A_type, A_signature, A_method> targets = 0B;
    private <A_type, A_signature, A_method> declaresMethod = 0B;
    private BDDHierarchy hier = PaddleScene.v().BDDHierarchy();

    private <A_varc, A_var, A_objc, A_obj> newPt = 0B;
    private <A_varc, A_var, A_objc, A_obj> allPt = 0B;
    private <A_varc, A_var, A_obj> allPtNoObjc = 0B;
    private <A_var, A_srcm, A_stmt, A_dtp, A_signature, A_kind> newRcv = 0B;
    private <A_var, A_srcm, A_stmt, A_dtp, A_signature, A_kind> allRcv = 0B;
    private <A_var, A_srcm, A_stmt, A_tgtm> newSpc = 0B;
    private <A_var, A_srcm, A_stmt, A_tgtm> allSpc = 0B;

    private boolean change;
    public boolean update() {
        change = false;

        updateNodes();

        newPt = pt.get();
        allPt |= newPt;
        allPtNoObjc |= (A_objc=>) newPt;

        newRcv = receivers.get();
        allRcv |= newRcv;

        newSpc = specials.get();
        allSpc |= newSpc;

        // update receivers
        updateClinits();
        updateVirtuals();

        updateSpecials();

        return change;
    }

    private <A_var, A_srcm, A_stmt, A_kind> clinits;
    private <A_srcc, A_var, A_tgtm> tgtMethods;
    private void updateClinits() {
        clinits |= (A_dtp=>, A_signature=>) newRcv{A_kind} >< new{Kind.CLINIT=>A_kind}{A_kind};

        tgtMethods |=
            ((A_varc=>A_srcc, A_objc=>) allPt){A_obj} <> newClinitTargets{A_obj} |
            ((A_varc=>A_srcc, A_objc=>) newPt){A_obj} <> clinitTargets{A_obj};

        clinitTargets |= newClinitTargets;
        newClinitTargets = 0B;

        <A_srcc, A_srcm, A_stmt, A_kind, A_tgtc, A_tgtm> newStatics =
            tgtMethods{A_var} <> clinits{A_var}{} 
                         >< new{null=>A_tgtc}{};
        statics.add( newStatics );
        if( newStatics != 0B ) change = true;
    }
    private <A_varc, A_var, A_objc, A_obj, A_srcm, A_stmt, A_tgtm> resolvedSpecials = 0B;
    private void updateSpecials() {

        <A_varc, A_var, A_objc, A_obj, A_srcm, A_stmt, A_tgtm> newSpecials =
            newPt{A_var} >< allSpc{A_var}
            | allPt{A_var} >< newSpc{A_var};

        newSpecials -= resolvedSpecials;
        resolvedSpecials |= newSpecials;

        out.add( newSpecials{} >< new{Kind.SPECIAL=>A_kind}{} );
        if( newSpecials != 0B ) change = true;
    }

    private <A_var, A_srcm, A_stmt, A_type, A_kind, A_tgtm> callSiteTargets = 0B;
    private <A_var, A_dtp, A_signature> rcvSigs = 0B;
    private <A_var, A_dtp, A_signature> threadRcvSigs = 0B;
    private <A_var, A_srcm, A_stmt, A_dtp, A_signature, A_kind> rcv = 0B;
    private <A_varc, A_var, A_objc, A_obj, A_type> allVarCtxtPt = 0B;
    private <A_var, A_type> allPtTypes = 0B;
    private void updateVirtuals() {
        <A_var, A_srcm, A_stmt, A_dtp, A_signature, A_kind> newVirtRcv = 
            newRcv{A_kind} >< (virtual|new{Kind.THREAD=>A_kind}){A_kind};
        rcv |= newVirtRcv;

        <A_var, A_dtp, A_signature, A_kind> sigs = (A_srcm=>, A_stmt=>) newVirtRcv;
        <A_var, A_dtp, A_signature> newRcvSigs = sigs{A_kind} <> virtual{A_kind};
        rcvSigs |= newRcvSigs;
        <A_var, A_dtp, A_signature> newThreadRcvSigs = sigs{A_kind} <>
                               new{Kind.THREAD=>A_kind}{A_kind};
        threadRcvSigs |= newThreadRcvSigs;

        // resolve new points-to sets
        <A_var, A_type> ptTypes = allocNodes{A_obj} <> (A_varc=>, A_objc=>) newPt{A_obj}; 

        <A_type, A_dtp, A_signature> newTypes = ptTypes{A_var} <> rcvSigs{A_var};

        newTypes |= (ptTypes{A_type} >< threads{A_type}){A_var} <> threadRcvSigs{A_var};

        allPtTypes |= ptTypes;
        newTypes |= allPtTypes{A_var} <> newRcvSigs{A_var};
        newTypes |= (allPtTypes{A_type} >< threads{A_type}){A_var} <>
                                    newThreadRcvSigs{A_var};

        // close under AnySubType; that is, if the receiver is AnySubType(t),
        // replace it with all subtypes of t
        hier.update();
        newTypes |= newTypes{A_type} <> hier.anySub(){A_anyst};

        // only resolve concrete types
        newTypes = newTypes{A_type} >< hier.concrete(){A_type};

        // if we've resolved them already, don't resolve them again
        <A_signature, A_type> typesToResolve = ((A_dtp=>)newTypes) - ((A_method=>)targets);

        // for each tuple [t, s], make it [t, s, t].
        <A_subt, A_signature, A_supt> toResolve = (A_type=>A_subt, A_type=>A_supt) typesToResolve;

        <A_type, A_signature, A_method> newTargets = 0B;

        do {
            // figure out which receivers are already resolved (if the
            // corresponding class already declares the method)
            <A_subt, A_signature, A_supt, A_method> resolved =
                toResolve {A_supt, A_signature} >< declaresMethod {A_type, A_signature};

            // remove resolved ones
            toResolve -= (A_method=>) resolved;

            // add resolved ones to targets
            newTargets |= (A_subt=>A_type, A_supt=>) resolved;

            // move one step up the hierarchy for the other receiver types
            toResolve =                          toResolve {A_supt} 
                <> (A_supt=>T3) (hier.extend()|hier.array()) {A_subt};
        } while( toResolve != 0B );


        <A_varc, A_var, A_objc, A_obj, A_type> typedPt = allocNodes{A_obj}><newPt{A_obj};

        // close typedPt under AnySubType
        typedPt |= typedPt{A_type} <> hier.anySub(){A_anyst};
        <A_varc, A_var, A_dtp, A_objc, A_obj, A_type> varCtxtPt =
            typedPt{A_var} >< (A_type=>A_dtp) varNodes{A_var};

        // Weed out types coming from AnySubType that are not compatible
        // with the declared type of the variable.
        varCtxtPt =         varCtxtPt{A_type, A_dtp} 
            >< hier.subtypeRelation(){A_subt, A_supt};

        // Weed out non-concrete actual types.
        varCtxtPt = varCtxtPt{A_type} >< hier.concrete(){A_type};

        allVarCtxtPt |= (A_dtp=>) varCtxtPt;

        <A_var, A_srcm, A_stmt, A_dtp, A_type, A_kind, A_tgtm> newCallSiteTargets =
            newVirtRcv{A_signature} <> (A_method=>A_tgtm) targets{A_signature}
            | rcv{A_signature} <> (A_method=>A_tgtm) newTargets{A_signature};

        targets |= newTargets;

        // If the dtp is null, it means we don't know it, so allow anything
        newCallSiteTargets = newCallSiteTargets{A_type, A_dtp}
                      >< hier.subtypeRelation(){A_subt, A_supt}
                    | newCallSiteTargets{A_dtp} >< new{null=>A_dtp}{A_dtp};

        callSiteTargets |= (A_dtp=>) newCallSiteTargets;

        <A_varc, A_var, A_objc, A_obj, A_srcm, A_stmt, A_kind, A_tgtm> newVirtuals =
            (A_type=>) (
                             (A_dtp=>) varCtxtPt{A_type, A_var}
                            >< callSiteTargets{A_type, A_var} );
        newVirtuals |= 
            (A_type=>) (      allVarCtxtPt{A_type, A_var}
            >< (A_dtp=>)newCallSiteTargets{A_type, A_var});

        out.add( newVirtuals );
        if( newVirtuals != 0B ) change = true;
    }
}
     

