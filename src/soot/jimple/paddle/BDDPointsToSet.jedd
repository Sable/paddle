/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import java.util.*;
import soot.jimple.paddle.bdddomains.*;
import jedd.*;

/** Implementation of PointsToSet providing an interface to a BDD of AllocNodes.
 * @author Ondrej Lhotak
 */
public class BDDPointsToSet extends PointsToSetReadOnly {
    final private <objc, obj:H1> bdd;
    public BDDPointsToSet( <objc, obj:H1> bdd ) {
        super(null);
        this.bdd = bdd;
    }
    /** Returns true if this set contains no run-time objects. */
    public boolean isEmpty() { return bdd == 0B; }
    /** Returns true if this set shares some objects with other. */
    public boolean hasNonEmptyIntersection( PointsToSet other ) {
        BDDPointsToSet o = (BDDPointsToSet) other;
        return (bdd & o.bdd) != 0B;
    }
    /** Calls v's visit method on all nodes in this set. */
    public boolean forall(P2SetVisitor v) {
        Iterator it = bdd.iterator( new Attribute[] { objc.v(), obj.v() } );
        while( it.hasNext() ) {
            Object[] item = (Object[]) it.next();
            v.visit(ContextAllocNode.make((Context) item[0], (AllocNode) item[1]));
        }
        return v.getReturnValue();
    }

    /** Returns true iff the set contains n. */
    public boolean contains( ContextAllocNode n ) {
        return 0B != new{n=>obj}{obj} >< bdd{obj};
    }

    public <objc, obj> bdd() {
        return bdd;
    }

    /* End of public methods. */
    /* End of package methods. */
}

