/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;

/** Keeps track of subtype relationships between PAG nodes.
 * @author Ondrej Lhotak
 */
public class TradTypeManager extends AbsTypeManager
{ 
    TradTypeManager( Rvar_method_type locals, Rvar_type globals, Robj_method_type localallocs, Robj_type globalallocs) {
        super( locals, globals, localallocs, globalallocs );
        this.fh = PaddleScene.v().fh;
        newContextAllocNodes = PaddleNumberers.v().contextAllocNodeNumberer().iterator();
    }
    private Iterator newContextAllocNodes;
    private void handleVarType( Type type ) {
        if( typeMask.get(type) != null ) return;
        BitVector bv = new BitVector( PaddleNumberers.v().contextAllocNodeNumberer().size() );
        typeMask.put( type, bv );
        for( Iterator canIt = PaddleNumberers.v().contextAllocNodeNumberer().iterator(); canIt.hasNext(); ) {
            final ContextAllocNode can = (ContextAllocNode) canIt.next();
            if( castNeverFails( can.getType(), type ) ) {
                //BitPointsToSet.validate(can);
                bv.set( can.getNumber() );
                change = true;
            }
        }
    }
    private void handleAllocNode( ContextAllocNode an, Type antype ) {
        for( Iterator typeIt = Scene.v().getTypeNumberer().iterator(); typeIt.hasNext(); ) {
            final Type type = (Type) typeIt.next();
            if( !( type instanceof RefLikeType ) ) continue;
            if( type instanceof AnySubType ) continue;
            BitVector bv = (BitVector) typeMask.get( type );
            if( bv == null ) continue;
            if( castNeverFails( antype, type ) ) {
                bv.set( an.getNumber() );
                change = true;
            }
        }
    }
    public boolean update() {
        boolean ret = false;
        for( Iterator tIt = locals.iterator(); tIt.hasNext(); ) {
            final Rvar_method_type.Tuple t = (Rvar_method_type.Tuple) tIt.next();
            handleVarType( t.type() );
            ret = true;
        }
        for( Iterator tIt = globals.iterator(); tIt.hasNext(); ) {
            final Rvar_type.Tuple t = (Rvar_type.Tuple) tIt.next();
            handleVarType( t.type() );
            ret = true;
        }
        while( newContextAllocNodes.hasNext() ) {
            ContextAllocNode can = (ContextAllocNode) newContextAllocNodes.next();
            handleAllocNode( can, can.getType() );
            ret = true;
        }
        return ret;
    }
    public BitVector get( Type type ) {
        if( type == null ) return null;
        update();
        BitVector ret = (BitVector) typeMask.get( type );
        if( ret == null && fh != null ) throw new RuntimeException( "oops"+type );
        return ret;
    }
    private BDDGetter bddGetter;
    public <A_var, A_obj> get() {
        if( fh == null ) return 1B;
        if( bddGetter == null ) bddGetter = new BDDGetter();
        return bddGetter.get();
    }
    class BDDGetter {
        private <A_type:T1, A_obj> cachedTypeMasks = 0B;
        private <A_var, A_type> cachedVarNodes = 0B;
        private <A_var, A_obj> cachedVarObj = 0B;
        public <A_var:V1, A_obj:H1> get() {
            update();
            if( change ) {
                for( Iterator tIt = Scene.v().getTypeNumberer().iterator(); tIt.hasNext(); ) {
                    final Type t = (Type) tIt.next();
                    BitVector mask = (BitVector) typeMask.get(t);
                    if( mask == null ) continue;
                    BitSetIterator bsi = mask.iterator();
                    Numberer objNumberer = PaddleNumberers.v().contextAllocNodeNumberer();
                    while( bsi.hasNext() ) {
                        int objNum = bsi.next();
                        cachedTypeMasks |= new{ t=>A_type, objNumberer.get(objNum)=>A_obj };
                    }
                }
                cachedVarObj = cachedTypeMasks{A_type} <> cachedVarNodes{A_type}; 
                change = false;
            }

            <A_var, A_type> varNodes = 0B;
            while( newVarNodes.hasNext() ) {
                VarNode vn = (VarNode) newVarNodes.next();
                varNodes |= new{vn=>A_var, vn.getType()=>A_type};
            }
            cachedVarObj |= cachedTypeMasks{A_type} <> varNodes{A_type};
            cachedVarNodes |= varNodes;
            return cachedVarObj;
        }
    }
    //private BDDHierarchy bddh = new BDDHierarchy();
    public boolean castNeverFails( Type from, Type to ) {
        if( fh == null ) return true;
        if( to == null ) return true;
        if( to == from ) return true;
        if( from == null ) return false;
        if( to.equals( from ) ) return true;
        boolean ret = castNeverFailsGuts(from, to);
        /*
        boolean ret1 = (bddh.subtypeRelation() & new{from=>A_subt, to=>A_supt}) != 0B;
        if( ret != ret1 ) {
            throw new RuntimeException( "hierarchies disagree on cast from "+from+" to "+to+";\nfh says "+ret+" while bddh says "+ret1);
        }
        */
        return ret;
    }
    public boolean castNeverFailsGuts( Type from, Type to ) {
        if( from instanceof NullType ) return true;
        //if( from instanceof AnySubType ) return true;
        if( to instanceof NullType ) return false;
        if( to instanceof AnySubType ) throw new RuntimeException( "oops from="+from+" to="+to );
        return fh.canStoreType( from, to );
    }

    private LargeNumberedMap typeMask = new LargeNumberedMap( Scene.v().getTypeNumberer() );
    private Iterator newVarNodes = PaddleNumberers.v().varNodeNumberer().iterator();
    private FastHierarchy fh;
    private boolean change = false;
}


