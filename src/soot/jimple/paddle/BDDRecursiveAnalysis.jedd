/* Soot - a J*va Optimization Framework
 * Copyright (C) 2005 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.jimple.*;
import soot.jimple.paddle.bdddomains.*;
import soot.jimple.paddle.queue.*;
import soot.util.*;
import java.util.*;

/** Finds methods that are potentially infinitely reursive. */
public class BDDRecursiveAnalysis {
    <A_srcc, A_srcm> recursive = 0B;

    /*
    public void analyze() {
        <A_srcc, A_srcm, A_tgtc, A_tgtm> calls =
            (A_kind=>, A_stmt=>) Results.v().callGraph().csEdges().get();
        <A_srcc, A_srcm, A_tgtc, A_tgtm> newCalls;
        do {
            newCalls = calls{A_tgtc,A_tgtm} <> (A_srcc=>C3, A_srcm=>M3) calls{A_srcc,A_srcm};
        } while( calls != (calls |= newCalls) );
        <A_srcc, A_srcm> source = (A_tgtc=>, A_tgtm=>) calls;
        <A_srcc, A_srcm, A_tgtc, A_tgtm> id =
            (A_srcc=>A_srcc, A_srcc=>A_tgtc, A_srcm=>A_srcm, A_srcm=>A_tgtm) source;
        recursive = (A_tgtc=>, A_tgtm=>) (calls & id);
        //SootMethod recurse = Scene.v().getMethod("<Recurse: void recurse(Recurse)>");
        //System.out.println( (calls{A_srcm} >< new{recurse=>A_srcm}{A_srcm}).toString() );
    }
    */

    public void analyze() {
        <A_kind> nonClinit = 1B - new{Kind.CLINIT=>A_kind};
        <A_srcc:CM1, A_srcm:MC1, A_tgtc:CM2, A_tgtm:MC2> calls;
        if( contextInsensitive ) {
            <A_srcm:MS, A_tgtm:MT> cicalls =
                (A_stmt=>) Results.v().callGraph().ciEdges().get(){A_kind} <>
                                                       nonClinit{A_kind};
            calls = cicalls{} >< new{null=>A_srcc, null=>A_tgtc}{};
        } else {
            <A_srcc:C1, A_srcm:MS, A_tgtc:C2, A_tgtm:MT> tmpCalls = 
                (A_stmt=>) Results.v().callGraph().csEdges().get(){A_kind} <>
                                                       nonClinit{A_kind};
            calls = tmpCalls;
        }
        <A_srcc:CM1, A_srcm:MC1, A_tgtc:CM2, A_tgtm:MC2> transCalls = calls;
        <A_srcc:CM2, A_srcm:MC2, A_tgtc:CM3, A_tgtm:MC3> newCalls = calls;

        do {
            newCalls = calls{A_tgtc,A_tgtm} <> newCalls{A_srcc,A_srcm};
            newCalls -= transCalls;
            transCalls |= newCalls;
        } while( newCalls != 0B );

        <A_srcc, A_srcm> source = (A_tgtc=>, A_tgtm=>) transCalls;
        <A_srcc, A_srcm, A_tgtc, A_tgtm> id =
            (A_srcc=>A_srcc, A_srcc=>A_tgtc, A_srcm=>A_srcm, A_srcm=>A_tgtm) source;
        recursive = (A_tgtc=>, A_tgtm=>) (transCalls & id);
    }

    public Iterator recursiveMethods() {
        return ((A_srcc=>)recursive).iterator();
    }
    private boolean contextInsensitive = false;
    public void setContextInsensitive() {
        contextInsensitive = true;
    }
}

